#include <stdio.h>
#include <stdlib.h>

typedef struct team team;
typedef struct mac mac;

struct team
{
    char name[12];
    int play;
    int win;
    int draw;
    int lose;
    int ag;
    int yg;
    int average;
    int point;
    int isPlayed[100];
};

struct settings
{
    int wPoint;
    int lPoint;
    int teamNo;
    int dPoint;
} setting;

struct mac
{
    char home;
    char enemy;
    int homeScore;
    int enemyScore;
};

team teams[100] = {"Init", 0, 0, 0, 0, 0, 0, 0, 0, {0}};
int teamCount = 0;

void swapTeams(team *A, team *B){
    team temp = *A;
    *A = *B;
    *B = temp;
}

void orderTeams()
{
    /*
        nasıl sıralama yaparsın:
        alttaki kodu x adet farklı if döngüsüne al
    */
    for (int i = 0; i < teamCount; i++)
    {
        for (int j = 0; j < teamCount - 1; j++)
        {
            if (teams[j + 1].point > teams[j].point)
            {
                swapTeams(&teams[j], &teams[j+1]);
            }
        }
    }
}

void fetchTeams()
{
    FILE *file_Teams = fopen("takimlar.txt", "r");
    char harf;
    do
    {
        harf = fgetc(file_Teams);
        if (harf == '\n')
            teamCount++;
    } while (harf != EOF);

    rewind(file_Teams);

    for (int i = 0; i < teamCount; i++)
    {
        fscanf(file_Teams, "%s", teams[i].name);
    }

    fclose(file_Teams);
}

void addScoreFromUser()
{
    mac Game;
    printf("Macin sonucunu giriniz. ex: A 3 B 2\n");
    scanf("%c %d %c %d", &Game.home, &Game.homeScore, &Game.enemy, &Game.enemyScore);
    getchar();

    if (teams[Game.home - 65].isPlayed[Game.enemy - 65] == 1) {
        printf("Bu takimlar arasinda mac oynamis!");
        return;
    } else {
        teams[Game.home - 65].isPlayed[Game.enemy - 65] = 1;
    }

    FILE * _games = fopen("maclar.txt", "a");
    fprintf(_games, "%c %d %c %d\n", Game.home, Game.homeScore, Game.enemy, Game.enemyScore);
    fclose(_games);

    if (Game.home - 65 >= teamCount || Game.enemy - 65 >= teamCount)

    teams[Game.home - 65].play += 1;
    teams[Game.enemy - 65].play += 1;

    // takımların atılan yenilen golleri
    teams[Game.home - 65].ag += Game.homeScore;
    teams[Game.home - 65].yg += Game.enemyScore;

    teams[Game.enemy - 65].ag += Game.enemyScore;
    teams[Game.enemy - 65].yg += Game.homeScore;

    // averaj
    teams[Game.home - 65].average += (Game.homeScore - Game.enemyScore);
    teams[Game.enemy - 65].average += (Game.enemyScore - Game.homeScore);

    if (Game.homeScore > Game.enemyScore)
    {
        // win lose arttır
        teams[Game.home - 65].win += 1;
        teams[Game.enemy - 65].lose += 1;

        // puanla
        teams[Game.home - 65].point += setting.wPoint;
        teams[Game.enemy - 65].point += setting.lPoint;
    } else if (Game.homeScore < Game.enemyScore)
    {
        teams[Game.home - 65].lose += 1;
        teams[Game.enemy - 65].win += 1;

        // puanla
        teams[Game.home - 65].point += setting.lPoint;
        teams[Game.enemy - 65].point += setting.wPoint;
    } else
    {
        teams[Game.home - 65].draw += 1;
        teams[Game.enemy - 65].draw += 1;

        // puanla
        teams[Game.home - 65].point += setting.dPoint;
        teams[Game.enemy - 65].point += setting.dPoint;
    }
}

void fetchGames()
{
    mac Game;
    FILE *games = fopen("maclar1.txt", "r+");

    int macSayisi = 0;

    char harf;
    do
    {
        harf = fgetc(games);
        if (harf == '\n')
            macSayisi++;
    } while (harf != EOF);

    rewind(games);

    for (int i = 0; i < macSayisi; i++)
    {
        fscanf(games, "%c %d %c %d\n", &Game.home, &Game.homeScore, &Game.enemy, &Game.enemyScore);

        if (teams[Game.home - 65].isPlayed[Game.enemy - 65] == 1) {
            printf("Bu takimlar arasinda mac oynamis!");
            continue;
        } else {
            teams[Game.home - 65].isPlayed[Game.enemy - 65] = 1;
        }

        teams[Game.home - 65].play += 1;
        teams[Game.enemy - 65].play += 1;

        // takımların atılan yenilen golleri
        teams[Game.home - 65].ag += Game.homeScore;
        teams[Game.home - 65].yg += Game.enemyScore;

        teams[Game.enemy - 65].ag += Game.enemyScore;
        teams[Game.enemy - 65].yg += Game.homeScore;

        // averaj
        teams[Game.home - 65].average += (Game.homeScore - Game.enemyScore);
        teams[Game.enemy - 65].average += (Game.enemyScore - Game.homeScore);

        if (Game.homeScore > Game.enemyScore)
        {
            // win lose arttır
            teams[Game.home - 65].win += 1;
            teams[Game.enemy - 65].lose += 1;

            // puanla
            teams[Game.home - 65].point += setting.wPoint;
            teams[Game.enemy - 65].point += setting.lPoint;
        } else if (Game.homeScore < Game.enemyScore)
        {
            // win lose arttır
            teams[Game.home - 65].lose += 1;
            teams[Game.enemy - 65].win += 1;

            // puanla
            teams[Game.home - 65].point += setting.lPoint;
            teams[Game.enemy - 65].point += setting.wPoint;
        } else
        {
            // win lose arttır
            teams[Game.home - 65].draw += 1;
            teams[Game.enemy - 65].draw += 1;

            // puanla
            teams[Game.home - 65].point += setting.dPoint;
            teams[Game.enemy - 65].point += setting.dPoint;
        }
    }
    fclose(games);
}

void showScoreTable() {
    printf("TURKIYE SANAL SUPER LIGI \n");
    printf("             O G M B AG YG A P\n");

    orderTeams();

    for (int i = 0; i < teamCount; i++) {
        printf("%s %d %d %d %d %d %d %d %d\n", teams[i].name, teams[i].play, teams[i].win, teams[i].lose,
                                             teams[i].draw, teams[i].ag, teams[i].yg,
                                             teams[i].average, teams[i].point);
    }
}


int main()
{
    FILE *settings = fopen("ayarlar.txt", "r");
    fscanf(settings, "%d \n %d \n %d \n %d", &setting.teamNo, &setting.wPoint, &setting.dPoint, &setting.lPoint);
    fclose(settings);

    fetchTeams();
    fetchGames();

    int selection = 1;
    char tryagain = 'h';

    do {
        printf("Secim Yapiniz... \n");
        printf("(1) Mac ekle \n");
        printf("(2) Puan durumu \n");
        scanf("%d", &selection);
        getchar();

        switch(selection) {
            case 1:
                addScoreFromUser();
                break;
            case 2:
                showScoreTable();
                exit(EXIT_SUCCESS);
                break;
            default:
                exit(EXIT_SUCCESS);
        }

        printf("\n Devam etmek istiyor musunuz? e/E\||h/H \n");
        scanf(" %c", &tryagain);

    } while (tryagain == 'e','E');

    return 0;
}
