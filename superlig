#include <stdio.h>
#include <stdlib.h>


// struct yapisinin kullanim kolayligi saglandi
typedef struct team team;
typedef struct mac mac;

// puan tablosunda gosterilecek degiskenler struct yapisinda tanimlandi
struct team
{
    char name[13];
    int play;
    int win;
    int draw;
    int lose;
    int ag;
    int yg;
    int average;
    int point;
    int isPlayed[100];
};

// ayarlar.txt dosyasinin degiskenleri struct yapisinda tanimlandi
struct settings
{
    int wPoint;
    int lPoint;
    int teamNo;
    int dPoint;
} setting;

// skor girisinde lazim olan degiskenler struct yapisinda tanimlandi
struct mac
{
    char home;
    char enemy;
    int homeScore;
    int enemyScore;
};

// puan  tablosundaki degerler tum takimlar icin sifirlandi
team teams[100] = {"Init", 0, 0, 0, 0, 0, 0, 0, 0, {0}};
int teamCount = +1;

// takimlari siralayan fonksiyonlar yazildi
void swapTeams(team *A, team *B){
    team temp = *A;
    *A = *B;
    *B = temp;
}

// puanlari yuksekten alcaga siralama
void orderTeams()
{
    for (int i = 0; i < teamCount; i++)
    {
        for (int j = 0; j < teamCount - 1; j++)
        {
            if (teams[j + 1].point > teams[j].point)
            {
                swapTeams(&teams[j], &teams[j+1]);
            }
        }
    }
}



void orderGoals()
{
    for (int i = 0; i < teamCount; i++)
    {
        for (int j = 0; j < teamCount - 1; j++)
        {
            if (teams[j + 1].ag > teams[j].ag)
            {
                swapTeams(&teams[j], &teams[j+1]);
            }
        }
    }
}




// puanlari isme gore siralama
void orderTeamNames()
{

    for (int i = 0; i < teamCount; i++)
    {
        for (int j = 0; j < teamCount - 1; j++)
        {
            int k=0;
            while(teams[j].name[k]!='\0')
            {
                if(teams[j].name[k]==teams[i].name[k])
                    k++;
                else
                    break;
            }
            if (teams[j].name[k] > teams[i].name[k])
            {
                swapTeams(&teams[j], &teams[i]);
            }
        }
    }
}


//puanlari  alcaktan yuksege dogru siralama
void orderTeamsInverse()
{
    for (int i = 0; i < teamCount; i++)
    {
        for (int j = 0; j < teamCount - 1; j++)
        {
            if (teams[j + 1].point < teams[j].point)
            {
                swapTeams(&teams[j], &teams[j+1]);
            }
        }
    }
}

//takimlar.txt dosyasindan takim isimleri alindi
void fetchTeams()
{
    FILE *file_Teams = fopen("takimlar.txt", "r");
    char harf;
    do
    {
        harf = fgetc(file_Teams);
        if (harf == '\n')
            teamCount++;
    } while (harf != EOF);

    rewind(file_Teams);

    for (int i =0 ; i < teamCount; i++)
    {
        fscanf(file_Teams, "%s", teams[i].name);
    }

    fclose(file_Teams);
}

// takimlarin isimlerini buyuk olacak sekilde yazma
void capitalLetterTeams()
{
    for(int i=0; i<teamCount; i++)
    {
        int j=0;
        while(teams[i].name[j]!='\0')
        {
            if(teams[i].name[j]>96)
                teams[i].name[j]-=32;
            j++;
        }
    }

}

//kullanicidan skor girisi alma
void addScoreFromUser()
{
    mac Game;
    printf("Macin sonucunu giriniz. ex: A 3 B 2\n");
    scanf("%c %d %c %d", &Game.home, &Game.homeScore, &Game.enemy, &Game.enemyScore);
    getchar();

    if (teams[Game.home - 65].isPlayed[Game.enemy - 65] == 1) {
        printf("Bu takimlar arasinda mac oynamis!");
        return;
    } else {
        teams[Game.home - 65].isPlayed[Game.enemy - 65] = 1;
    }

    FILE * _games = fopen("maclar1.txt", "a");
    fprintf(_games, "%c %d %c %d\n", Game.home, Game.homeScore, Game.enemy, Game.enemyScore);
    fclose(_games);

    if (Game.home - 65 >= teamCount || Game.enemy - 65 >= teamCount)

    teams[Game.home - 65].play += 1;
    teams[Game.enemy - 65].play += 1;

    // takımların atılan yenilen golleri
    teams[Game.home - 65].ag += Game.homeScore;
    teams[Game.home - 65].yg += Game.enemyScore;

    teams[Game.enemy - 65].ag += Game.enemyScore;
    teams[Game.enemy - 65].yg += Game.homeScore;

    // averaj
    teams[Game.home - 65].average += (Game.homeScore - Game.enemyScore);
    teams[Game.enemy - 65].average += (Game.enemyScore - Game.homeScore);

    if (Game.homeScore > Game.enemyScore)
    {
        // win lose arttır
        teams[Game.home - 65].win += 1;
        teams[Game.enemy - 65].lose += 1;

        // puanla
        teams[Game.home - 65].point += setting.wPoint;
        teams[Game.enemy - 65].point += setting.lPoint;
    } else if (Game.homeScore < Game.enemyScore)
    {
        teams[Game.home - 65].lose += 1;
        teams[Game.enemy - 65].win += 1;

        // puanla
        teams[Game.home - 65].point += setting.lPoint;
        teams[Game.enemy - 65].point += setting.wPoint;
    } else
    {
        teams[Game.home - 65].draw += 1;
        teams[Game.enemy - 65].draw += 1;

        // puanla
        teams[Game.home - 65].point += setting.dPoint;
        teams[Game.enemy - 65].point += setting.dPoint;
    }
}

//maclar1.txt dosyasindan maclari okuma
void fetchGames()
{
    mac Game;
    FILE *games = fopen("maclar1.txt", "r+");

    int macSayisi = 0;

    char harf;
    do
    {
        harf = fgetc(games);
        if (harf == '\n')
            macSayisi++;
    } while (harf != EOF);

    rewind(games);

    for (int i = 0; i < macSayisi; i++)
    {
        fscanf(games, "%c %d %c %d\n", &Game.home, &Game.homeScore, &Game.enemy, &Game.enemyScore);

        if (teams[Game.home - 65].isPlayed[Game.enemy - 65] == 1) {
            printf("Bu takimlar arasinda mac oynamis!");
            continue;
        } else {
            teams[Game.home - 65].isPlayed[Game.enemy - 65] = 1;
        }

        teams[Game.home - 65].play += 1;
        teams[Game.enemy - 65].play += 1;

        // takımların atılan yenilen golleri
        teams[Game.home - 65].ag += Game.homeScore;
        teams[Game.home - 65].yg += Game.enemyScore;

        teams[Game.enemy - 65].ag += Game.enemyScore;
        teams[Game.enemy - 65].yg += Game.homeScore;

        // averaj
        teams[Game.home - 65].average += (Game.homeScore - Game.enemyScore);
        teams[Game.enemy - 65].average += (Game.enemyScore - Game.homeScore);

        if (Game.homeScore > Game.enemyScore)
        {
            // win lose arttır
            teams[Game.home - 65].win += 1;
            teams[Game.enemy - 65].lose += 1;

            // puanla
            teams[Game.home - 65].point += setting.wPoint;
            teams[Game.enemy - 65].point += setting.lPoint;
        } else if (Game.homeScore < Game.enemyScore)
        {
            // win lose arttır
            teams[Game.home - 65].lose += 1;
            teams[Game.enemy - 65].win += 1;

            // puanla
            teams[Game.home - 65].point += setting.lPoint;
            teams[Game.enemy - 65].point += setting.wPoint;
        } else
        {
            // win lose arttır
            teams[Game.home - 65].draw += 1;
            teams[Game.enemy - 65].draw += 1;

            // puanla
            teams[Game.home - 65].point += setting.dPoint;
            teams[Game.enemy - 65].point += setting.dPoint;
        }
    }
    fclose(games);
}

//skor tablosunu yuksekten alcaga gosterme
void showScoreTable() {
    printf("TURKIYE SANAL SUPER LIGI \n");
    printf("              O  G  M  B  AG  YG  AV    PU\n");

    orderTeams();

    for (int i = 0; i < teamCount; i++) {
        printf("%s  %d  %d  %d  %d  %d   %d   %d\t%d\n", teams[i].name, teams[i].play, teams[i].win, teams[i].lose,
                                             teams[i].draw, teams[i].ag, teams[i].yg,
                                             teams[i].average, teams[i].point);
    }
}



void showScoreTableGoals() {
    printf("TURKIYE SANAL SUPER LIGI \n");
    printf("              O  G  M  B  AG  YG  AV    PU\n");

    orderGoals();

    for (int i = 0; i < teamCount; i++) {
        printf("%s  %d  %d  %d  %d  %d   %d   %d\t%d\n", teams[i].name, teams[i].play, teams[i].win, teams[i].lose,
                                             teams[i].draw, teams[i].ag, teams[i].yg,
                                             teams[i].average, teams[i].point);
    }
}


//skor tablosunu alcaktan yuksege sıralama
void showScoreTableInverse() {
    printf("TURKIYE SANAL SUPER LIGI \n");
    printf("              O  G  M  B  AG  YG   AV   PU\n");

    orderTeamsInverse();

    for (int i = 0; i < teamCount; i++) {
        printf("%s  %d  %d  %d  %d  %d   %d    %d\t%d\n", teams[i].name, teams[i].play, teams[i].win, teams[i].lose,
                                             teams[i].draw, teams[i].ag, teams[i].yg,
                                             teams[i].average, teams[i].point);
    }
}
//skor tablosunda takim isimlerini buyuk yazdirma
void showScoreTableCapital() {
    printf("TURKIYE SANAL SUPER LIGI \n");
    printf("              O  G  M  B  AG  YG  AV    PU\n");

    orderTeams();
    capitalLetterTeams();

    for (int i = 0; i < teamCount; i++) {
        printf("%s  %d  %d  %d  %d  %d   %d   %d\t%d\n", teams[i].name, teams[i].play, teams[i].win, teams[i].lose,
                                             teams[i].draw, teams[i].ag, teams[i].yg,
                                             teams[i].average, teams[i].point);
    }
}

//skor tablosunu alfabetik sekilde siralama
void showScoreTableAlphabetical() {
    printf("TURKIYE SANAL SUPER LIGI \n");
    printf("              O  G  M  B  AG  YG   A     P\n");

    orderTeamNames();

    for (int i = 0; i < teamCount; i++) {
        printf("%s  %d  %d  %d  %d  %d   %d    %d \t %d\n", teams[i].name, teams[i].play, teams[i].win, teams[i].lose,
                                             teams[i].draw, teams[i].ag, teams[i].yg,
                                             teams[i].average, teams[i].point);
    }
}

int main()
{
    FILE *settings = fopen("ayarlar.txt", "r");
    fscanf(settings, "%d \n %d \n %d \n %d", &setting.teamNo, &setting.wPoint, &setting.dPoint, &setting.lPoint);
    fclose(settings);

    fetchTeams();
    fetchGames();

    int selection = 1;
    char tryagain = 'h';

//kullanicinin istegine gore secim yapan menu olusturuldu
    do {
        printf("(1) Mac ekle \n");
        printf("(2) Puan durumunu normal siralamak icin \n");
        printf("(3) Puan durumunu tersten siralamak icin \n");
        printf("(4) Puan durumunu buyuk harf seklinde siralamak icin \n");
        printf("(5) Puan durumunu alfabetik siralamak icin \n");
        printf("(6) Puan durumunu gole göre siralamak icin \n");



        scanf("%d", &selection);
        getchar();

        switch(selection) {
            case 1:
                addScoreFromUser();
                break;
            case 2:
                showScoreTable();
                exit(EXIT_SUCCESS);
                break;
            case 3:
                showScoreTableInverse();
                exit(EXIT_SUCCESS);
                break;
            case 4:
                showScoreTableCapital();
                exit(EXIT_SUCCESS);
                break;
            case 5:
                showScoreTableAlphabetical();
                exit(EXIT_SUCCESS);
                break;
            case 6:
                showScoreTableGoals();
                 exit(EXIT_SUCCESS);
                break;
            default:
                exit(EXIT_SUCCESS);
        }

        printf("\n Devam etmek istiyor musunuz? e/h \n");
        scanf(" %c", &tryagain);

    } while (tryagain == 'e');

    return 0;
}
